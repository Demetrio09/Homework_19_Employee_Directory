{"version":3,"sources":["components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","fetchSearchResults","employeesArr","cancel","axios","CancelToken","source","get","cancelToken","token","then","data","resultNotFound","results","length","setState","result","message","loading","console","warn","push","catch","err","isCancel","handleOnInputChange","event","query","target","value","renderSearchResult","state","Object","keys","className","map","key","cell","name","first","last","src","picture","large","alt","email","this","htmlFor","type","id","placeholder","onChange","aria-hidden","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"kTAmHeA,E,kDA9Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,mBAAqB,WACnB,IAAMC,EAAe,GAkCrB,OA/BI,EAAKC,QACP,EAAKA,OAAOA,SAGd,EAAKA,OAASC,IAAMC,YAAYC,SAEhCF,IACGG,IATe,gDASA,CACdC,YAAa,EAAKL,OAAOM,QAE1BC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACDC,EAAkBD,EAAKE,QAAQC,OAEjC,GADA,wBAGJ,EAAKC,SAAS,CACZC,OAAQL,EAAKE,QACbI,QAASL,EACTM,SAAS,IAEXC,QAAQC,KAAKT,GACbT,EAAamB,KAAKV,MAEnBW,OAAM,SAACC,IACFnB,IAAMoB,SAASD,IAAQA,IACzB,EAAKR,SAAS,CACZG,SAAS,EACTD,QAAS,sDAIVf,GA9CU,EAiDnBuB,oBAAsB,SAACC,GAErB,IAAMC,EAAQD,EAAME,OAAOC,MAC3B,EAAKd,SAAS,CAAEY,MAAOA,EAAOT,SAAS,EAAMD,QAAS,KAAM,WAC1D,EAAKhB,yBArDU,EAyDnB6B,mBAAqB,WAAO,IAClBd,EAAW,EAAKe,MAAhBf,OAER,GAAIgB,OAAOC,KAAKjB,GAAQF,QAAUE,EAAOF,OACvC,OACE,yBAAKoB,UAAU,qBACZlB,EAAOmB,KAAI,SAACnB,GACX,OACE,yBAAKoB,IAAKpB,EAAOqB,KAAMH,UAAU,eAC/B,wBAAIA,UAAU,sBAAsBlB,EAAOsB,KAAKC,OAChD,wBAAIL,UAAU,qBAAqBlB,EAAOsB,KAAKE,MAC/C,yBAAKN,UAAU,gBACf,yBACEA,UAAU,QACVO,IAAKzB,EAAO0B,QAAQC,MACpBC,IAAG,UAAK5B,EAAOsB,KAAKC,MAAjB,YAGL,wBAAIL,UAAU,kBAAkBlB,EAAO6B,aAxEnD,EAAKd,MAAQ,CACXJ,MAAO,GACPX,OAAQ,GACRE,SAAS,EACTD,QAAS,IAPM,E,qDAoFT,IAAD,EACoB6B,KAAKf,MAAxBJ,EADD,EACCA,MAAOV,EADR,EACQA,QACf,OACE,yBAAKiB,UAAU,aAEb,wBAAIA,UAAU,WAAd,sBAEA,2BAAOA,UAAU,eAAea,QAAQ,gBACtC,2BACEC,KAAK,OACLnB,MAAOF,EACPsB,GAAG,eACHC,YAAY,YACZC,SAAUL,KAAKrB,sBAEjB,uBAAGS,UAAU,4BAA4BkB,cAAY,UAGtDnC,GAAW,uBAAGiB,UAAU,WAAWjB,GAEnC6B,KAAKhB,0B,GAzGOuB,aCMNC,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFOD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACLnD,QAAQmD,MAAMA,EAAMrD,c","file":"static/js/main.e8b124ce.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../Search.css\";\nimport axios from \"axios\";\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: \"\",\n      result: {},\n      loading: false,\n      message: \"\",\n    };\n  }\n\n  fetchSearchResults = () => {\n    const employeesArr = [];\n    const searchURL = \"https://randomuser.me/api/?results=100&nat=us\";\n\n    if (this.cancel) {\n      this.cancel.cancel();\n    }\n\n    this.cancel = axios.CancelToken.source();\n\n    axios\n      .get(searchURL, {\n        cancelToken: this.cancel.token,\n      })\n      .then(({ data }) => {\n        const resultNotFound = !data.results.length\n          ? \"There is no more data\"\n          : \"\";\n\n        this.setState({\n          result: data.results,\n          message: resultNotFound,\n          loading: false,\n        });\n        console.warn(data);\n        employeesArr.push(data);\n      })\n      .catch((err) => {\n        if (axios.isCancel(err) || err) {\n          this.setState({\n            loading: false,\n            message: \"Failed to fetch the data. Please check network\",\n          });\n        }\n      });\n    return employeesArr;\n  };\n\n  handleOnInputChange = (event) => {\n    // Getting the value and name of the input wich triggered the change\n    const query = event.target.value;\n    this.setState({ query: query, loading: true, message: \"\" }, () => {\n      this.fetchSearchResults();\n    });\n  };\n\n  renderSearchResult = () => {\n    const { result } = this.state;\n\n    if (Object.keys(result).length && result.length) {\n      return (\n        <div className=\"results-container\">\n          {result.map((result) => {\n            return (\n              <div key={result.cell} className=\"result-item\">\n                <h3 className=\"employee-firstname\">{result.name.first}</h3>\n                <h3 className=\"employee-lastname\">{result.name.last}</h3>\n                <div className=\"image-wraper\">\n                <img\n                  className=\"image\"\n                  src={result.picture.large}\n                  alt={`${result.name.first} name`}\n                ></img>\n                </div>\n                <h3 className=\"employee-email\">{result.email}</h3>\n              </div>\n            );\n          })}\n        </div>\n      );\n    }\n  };\n\n  render() {\n    const { query, message } = this.state;\n    return (\n      <div className=\"container\">\n        {/* {Heading} */}\n        <h2 className=\"heading\">Employee Directory</h2>\n        {/* Search Input */}\n        <label className=\"search-label\" htmlFor=\"search-input\">\n          <input\n            type=\"text\"\n            value={query}\n            id=\"search-input\"\n            placeholder=\"Search...\"\n            onChange={this.handleOnInputChange}\n          />\n          <i className=\"fas fa-search search-icon\" aria-hidden=\"true\" />\n        </label>\n        {/* Error */}\n        {message && <p className=\"message\">{message}</p>}\n        {/* Result */}\n        {this.renderSearchResult()}\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/Search\";\n\nclass App extends Component {\n  render() {\n    return <Search />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}